import react, { useState, useEffect } from 'react'
import Head from 'next/head'
import Header from '@/components/Header'

import { WHITELIST_CONTRACT_ADDRESS, ABI } from '@/constants'
import { ethers } from 'ethers'
import { MetaMaskInpageProvider } from '@metamask/providers'
import { selectNumberOfWhitelistedAddresses, setNumberOfWhitelistedAddresses } from '@/redux/whitelist/whitelistSlice'
import { useDispatch, useSelector } from 'react-redux'
import useGetSigner from '@/hooks/getSigner'


export default function Home() {

  const [address, setAddress] = useState<string>('')
  const [walletConnected, setWalletConnected] = useState(false)

  const numberOfWhitelistedAddresses = useSelector(selectNumberOfWhitelistedAddresses)
  const dispatch = useDispatch()
  const { _signer, connectSigner } = useGetSigner()

  const getProvider = async (): Promise<ethers.BrowserProvider | undefined> => {
    try {
      const { ethereum } = window;
      return new ethers.BrowserProvider(ethereum as MetaMaskInpageProvider);

    } catch (error) {
      console.log("Error with the getProvider method: ", error)
    }
  }


  const addAddressToWhitelist = async (event: any) => {
    event.preventDefault()

    try {
      await connectSigner()
      const contract = new ethers.Contract(WHITELIST_CONTRACT_ADDRESS, ABI.abi, _signer)
      const tx = await contract.addAddressToWhitelist()
      await tx.wait()
      await getNumberOfWhitelisted();

    } catch (error) {
      console.log("Error with the addAddressToWhitelist method: ", error)
    }
  };

  const getNumberOfWhitelisted = async () => {

    try {
      const provider = await getProvider()

      const contract = new ethers.Contract(WHITELIST_CONTRACT_ADDRESS, ABI.abi, provider)
      const numberOfWhitelisted = await contract.numberOfAddressesWhitelisted()
      console.log("numberOfWhitelisted", numberOfWhitelisted.toString())

      dispatch(setNumberOfWhitelistedAddresses(numberOfWhitelisted.toString()))

    } catch (error) {
      console.log("Error with the getNumberOfWhitelisted method: ", error)
    }
  };

  const checkIfAddressInWhitelist = async () => {
    try {
      await connectSigner()

      if (!_signer) {
        throw new Error("Signer is not defined");
      }

      const whitelistContract = new ethers.Contract(WHITELIST_CONTRACT_ADDRESS, ABI.abi, _signer);
      const address: string = await _signer.getAddress();
      const _joinedWhitelist = await whitelistContract.whitelistedAddresses(address);
      console.log("joinedWhitelist", _joinedWhitelist);

    } catch (err) {
      console.error(err);
    }
  };

  const connectWallet = async () => {
    try {
      await connectSigner();
      await checkIfAddressInWhitelist();
      await getNumberOfWhitelisted();
      setWalletConnected(true)
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    if (!walletConnected) {
      connectWallet();
    }
  }, [])


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

        <Header />

      </main>
    </>
  )
}
